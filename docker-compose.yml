services:
  postgres:
    image: postgres:15.3
    container_name: policy_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env

  wiremock:
    image: wiremock/wiremock:3.3.1
    container_name: wiremock
    ports:
      - "8089:8080"
    volumes:
      - ./wiremock:/home/wiremock
    command: [ "--global-response-templating" ]

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka_broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_KRAFT_CLUSTER_ID: kRaFtCluster12345
      ALLOW_PLAINTEXT_LISTENER: yes

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: policy_event_app
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - wiremock
      - kafka
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    command: ["java", "-jar", "app.jar"]
    env_file:
      - .env

volumes:
  pgdata: